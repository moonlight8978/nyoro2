RSpec
expect(x).to matcher(y)
expect(x).not_to matcher(y)

Ruby
module_function => class level method. If include => instance private method
length, size, count
  length => method of array, string
  size => enum's method => array, hash
  count => enum's method, but often used with block to count smth in collection 

Ruby on Rails
length, size, count
  length => load array, goi length cua array
  size => goi count() neu chua load, goi length() neu da load
  count => goi den ham count()

joins(:association).order("table_name.attribute direction")
  != joins(:association).order("table_name.attribute": :direction)

cannot call content_for in application layout

has_many_and_belongs_to: destroy does not destroy the objects.

polymorphic: association must be clearly defined, cannot eagerload :~able

counter_cache, owner will have a new field (~_count) in table

carrierwave: 
resize_to_fit will scale up images if they are smaller than the given size 
resize_to_limit won't do anything if the image is already smaller than the size given
resize_to_fill cut image when necessary

has_many:
a.collection [1,2]
a.collection.build => [1,2,new_object]

form:
So first you'll need to make sure that team_id exists on the user model. 
And seoncdly, as Doon suggested, you don't need fields_for unless you want to interact 
with the team model and make changes from within that same form.

nested form:
accept_nest_attributes(blah..blah), delegate associations_attributes= to ActiveModel object or build it.

SQL
select(avg, count) require group(~)
group with condition => having

CSS
flex inside table => will overflow because table auto layout 
  => table-layout: fixed => hard to control, width is based on first row of table